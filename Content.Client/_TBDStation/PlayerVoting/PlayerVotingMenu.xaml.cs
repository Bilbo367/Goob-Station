using Content.Client.UserInterface.Controls;
using Content.Shared.Heretic;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Numerics;
using System.Diagnostics.CodeAnalysis;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.PlayerVoting;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;
using static Content.Client._Goobstation.Heretic.UI.LivingHeartMenu;
using Content.Shared.Mind.Components;
using Robust.Client.GameObjects;
using Robust.Shared.Player;

namespace Content.Client._TBDStation.PlayerVoting;

[GenerateTypedNameReferences]
public sealed partial class PlayerVotingMenu : DefaultWindow
{
    [Dependency] private readonly EntityManager _ent = default!;
    public PlayerVotingMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }
    public void UpdateUI()
    {
        var main = FindControl<BoxContainer>("Main");
        if (main == null) return;
        var query = _ent.EntityQueryEnumerator<ActorComponent>(); // SpriteComponent


        while (query.MoveNext(out var uid, out var mindContainer))
        {
            var fi = 30;
            fi *= 3;
            // var mindId = mindContainer.Mind.Value;
            // var ent = _ent.GetEntity(mindContainer);
            // if (ent == null)
            //     continue;
            var button = new EmbeddedEntityMenuButton
            {
                SetSize = new Vector2(64, 64),
                ToolTip = _ent.TryGetComponent<MetaDataComponent>(uid, out var md) ? md.EntityName : "Unknown",
                // NetEntity = (NetEntity) uid,
            };

            var texture = new SpriteView(uid, _ent)
            {
                OverrideDirection = Direction.South,
                VerticalAlignment = VAlignment.Center,
                SetSize = new Vector2(64, 64),
                VerticalExpand = true,
                Stretch = SpriteView.StretchMode.Fill,
            };
            button.AddChild(texture);

            main.AddChild(button);
        }
        // AddAction(main);
    }
}
// public sealed partial class PlayerVotingMenu : FancyWindow
// {
//     [Dependency] private readonly EntityManager _ent = default!;
//     [Dependency] private readonly IPrototypeManager _prot = default!;
//     [Dependency] private readonly IPlayerManager _player = default!;

//     public EntityUid Entity { get; private set; }

//     public event Action<NetEntity>? SendActivateMessageAction;

//     public PlayerVotingMenu()
//     {
//         IoCManager.InjectDependencies(this);
//         RobustXamlLoader.Load(this);
//     }

//     public void SetEntity(EntityUid ent)
//     {
//         Entity = ent;
//         UpdateUI();
//     }

//     private void UpdateUI()
//     {
//         // var main = FindControl<RadialContainer>("Main");
//         // if (main == null) return;

//         // var player = _player.LocalEntity;

//         // if (!_ent.TryGetComponent<HereticComponent>(player, out var heretic))
//         //     return;

//         // foreach (var target in heretic.SacrificeTargets)
//         // {
//         //     if (target == null) continue;

//         //     var ent = _ent.GetEntity(target);
//         //     if (ent == null)
//         //         continue;

//         //     var button = new EmbeddedEntityMenuButton
//         //     {
//         //         StyleClasses = { "RadialMenuButton" },
//         //         SetSize = new Vector2(64, 64),
//         //         ToolTip = _ent.TryGetComponent<MetaDataComponent>(ent.Value, out var md) ? md.EntityName : "Unknown",
//         //         NetEntity = (NetEntity) target,
//         //     };

//         //     var texture = new SpriteView(ent.Value, _ent)
//         //     {
//         //         OverrideDirection = Direction.South,
//         //         VerticalAlignment = VAlignment.Center,
//         //         SetSize = new Vector2(64, 64),
//         //         VerticalExpand = true,
//         //         Stretch = SpriteView.StretchMode.Fill,
//         //     };
//         //     button.AddChild(texture);

//         //     main.AddChild(button);
//         // }
//         // AddAction(main);
//     }

//     private void AddAction(RadialContainer main)
//     {
//         if (main == null)
//             return;

//         foreach (var child in main.Children)
//         {
//             var castChild = child as EmbeddedEntityMenuButton;
//             if (castChild == null)
//                 continue;

//             castChild.OnButtonUp += _ =>
//             {
//                 SendActivateMessageAction?.Invoke(castChild.NetEntity);
//                 Close();
//             };
//         }
//     }

//     public sealed class EmbeddedEntityMenuButton : RadialMenuTextureButton
//     {
//         public NetEntity NetEntity;
//     }
// }
